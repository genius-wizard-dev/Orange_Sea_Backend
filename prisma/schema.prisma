generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum GroupRole {
  OWNER
  // ADMIN
  MEMBER
}

model Account {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  username  String   @unique
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  profile   Profile?
}

model Profile {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  account   Account   @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId String    @unique @db.ObjectId
  name      String?
  avatar    String?
  bio       String?
  phone     String?
  birthday  DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  isSetup   Boolean   @default(false)

  sentFriendRequests     Friendship[]  @relation("SenderRelation")
  receivedFriendRequests Friendship[]  @relation("ReceiverRelation")
  ownedGroup             Group[]       @relation("Owner")
  participatedGroup      Participant[]
  sentMessages           Message[]
}

model Friendship {
  id         String           @id @default(auto()) @map("_id") @db.ObjectId
  sender     Profile          @relation("SenderRelation", fields: [senderId], references: [id], onDelete: Cascade)
  senderId   String           @db.ObjectId
  receiver   Profile          @relation("ReceiverRelation", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId String           @db.ObjectId
  status     FriendshipStatus @default(PENDING)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  @@unique([senderId, receiverId])
  @@index([senderId, status])
  @@index([receiverId, status])
}

model Group {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  name         String?
  isGroup      Boolean       @default(false)
  owner        Profile       @relation("Owner", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId      String        @db.ObjectId
  participants Participant[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  messages     Message[]
}

model Participant {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  user     Profile   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String    @db.ObjectId
  group    Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId  String    @db.ObjectId
  role     GroupRole @default(MEMBER)
  joinedAt DateTime  @default(now())

  @@unique([userId, groupId])
  @@index([groupId])
  @@index([userId])
}

model Message {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  sender          Profile          @relation(fields: [senderId], references: [id], onDelete: Cascade)
  senderId        String           @db.ObjectId
  group           Group            @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId         String           @db.ObjectId
  content         String?
  imageUrl        String?
  videoUrl        String?
  stickerUrl      String?
  type            MessageType      @default(TEXT)
  isRecalled      Boolean          @default(false)
  recalledAt      DateTime?
  editedAt        DateTime?
  originalContent String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  readBy          ReadMessage[]
  deletedBy       DeletedMessage[]
  forwardedFrom   String?          @db.ObjectId
  forwardedAt     DateTime?

  @@index([groupId, createdAt(sort: Desc)])
  @@index([senderId])
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
  STICKER
}

model ReadMessage {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId String   @db.ObjectId
  userId    String   @db.ObjectId
  readAt    DateTime @default(now())

  @@unique([messageId, userId])
  @@index([messageId])
}

// Thêm model để lưu trữ thông tin xóa tin nhắn theo người dùng
model DeletedMessage {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId String   @db.ObjectId
  userId    String   @db.ObjectId
  deletedAt DateTime @default(now())

  @@unique([messageId, userId])
  @@index([messageId])
  @@index([userId])
}
