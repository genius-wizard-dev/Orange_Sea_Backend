generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  REJECTED
  BLOCKED
}

enum GroupRole {
  OWNER
  ADMIN
  MEMBER
}

enum PostVisibility {
  PUBLIC
  FRIENDS
  PRIVATE
}

model Account {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  username  String   @unique
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  profile   Profile?
}

model Profile {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  account   Account   @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId String    @unique @db.ObjectId
  name      String?
  avatar    String?
  bio       String?
  phone     String?
  birthday  DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  isSetup   Boolean   @default(false)

  sentFriendRequests     Friendship[]              @relation("SenderRelation")
  receivedFriendRequests Friendship[]              @relation("ReceiverRelation")
  posts                  Post[]
  comments               Comment[]
  likes                  Like[]
  ownedConversations     Conversation[]            @relation("Owner")
  participatedChats      ConversationParticipant[]
  sentMessages           Message[]
}

model Friendship {
  id         String           @id @default(auto()) @map("_id") @db.ObjectId
  sender     Profile          @relation("SenderRelation", fields: [senderId], references: [id], onDelete: Cascade)
  senderId   String           @db.ObjectId
  receiver   Profile          @relation("ReceiverRelation", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId String           @db.ObjectId
  status     FriendshipStatus @default(PENDING)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  @@unique([senderId, receiverId])
  @@index([senderId, status])
  @@index([receiverId, status])
}

model Post {
  id         String         @id @default(auto()) @map("_id") @db.ObjectId
  author     Profile        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId   String         @db.ObjectId
  content    String?
  images     String[]       @default([])
  video      String?
  visibility PostVisibility @default(PUBLIC)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  comments   Comment[]
  likes      Like[]

  @@index([authorId, createdAt(sort: Desc)])
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String   @db.ObjectId
  author    Profile  @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String   @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([postId, createdAt(sort: Desc)])
  @@index([authorId])
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String   @db.ObjectId
  user      Profile  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())

  @@unique([postId, userId])
  @@index([postId])
  @@index([userId])
}

model Conversation {
  id            String                    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  isGroup       Boolean                   @default(false)
  owner         Profile                   @relation("Owner", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId       String                    @db.ObjectId
  participants  ConversationParticipant[]
  messages      Message[]
  lastMessage   Message?                  @relation("LastMessage", fields: [lastMessageId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  lastMessageId String?                   @unique @db.ObjectId // Added @unique here
  createdAt     DateTime                  @default(now())
  updatedAt     DateTime                  @updatedAt

  @@index([ownerId])
}

model ConversationParticipant {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  user           Profile      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String       @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String       @db.ObjectId
  role           GroupRole    @default(MEMBER)
  joinedAt       DateTime     @default(now())

  @@unique([userId, conversationId])
  @@index([conversationId])
  @@index([userId])
}

model Message {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  sender         Profile       @relation(fields: [senderId], references: [id], onDelete: Cascade)
  senderId       String        @db.ObjectId
  conversation   Conversation  @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String        @db.ObjectId
  content        String?
  fileUrl        String?
  fileType       String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  readBy         ReadReceipt[]
  lastInConv     Conversation? @relation("LastMessage")

  @@index([conversationId, createdAt(sort: Desc)])
  @@index([senderId])
}

model ReadReceipt {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId String   @db.ObjectId
  userId    String   @db.ObjectId
  readAt    DateTime @default(now())

  @@unique([messageId, userId])
  @@index([messageId])
}
